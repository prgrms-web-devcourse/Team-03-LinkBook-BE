# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3


      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'


      - name: Make env file
        run: |
          # create env file
          cd ./src/main/resources

          # application-database.yaml 파일 생성
          touch ./application-database.yaml

          # GitHub-Actions 에서 설정한 값을 application-database.yaml 파일에 쓰기
          echo "${{ secrets.DATABASE }}" >> ./application-database.yaml

        shell: bash


      - name: Build with Gradle
        run: ./gradlew bootJar


      - name: Build Docker Image For Spring
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -t ${{ secrets.DOCKER_USERNAME }}/linkbook-web .
          docker push ${{ secrets.DOCKER_USERNAME }}/linkbook-web


      - name: Build Docker Image For Nginx
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME_NGINX }} -p ${{ secrets.DOCKER_PASSWORD_NGINX }}
          docker build -t ${{ secrets.DOCKER_USERNAME_NGINX }}/nginx .
          docker push ${{ secrets.DOCKER_USERNAME_NGINX }}/nginx


      - name: EC2 Docker Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          script: |
            docker stop server
            docker rmi ${{ secrets.DOCKER_USERNAME }}/linkbook-web
            docker pull ${{ secrets.DOCKER_USERNAME }}/linkbook-web
            docker run -d --rm --name server -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/linkbook-web


      - name: Github Action Slack Noti
        uses: 8398a7/action-slack@v3.12.0
        with:
          status: ${{ job.status }}
          author_name: Github Action # default: 8398a7@action-slack
          fields: message,commit,author,eventName,workflow,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} # required
        if: always() # Pick up events even if the job fails or is canceled.

